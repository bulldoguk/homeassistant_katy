blueprint:
  name: Circadian and on lighting
  description: Lighting levels based on circadian rhythm or room status of ON
  domain: automation
  input:
    target_area:
      name: Areas
      selector:
        area:
          multiple: true

variables:
  target_area_input: !input target_area
  target_lights: "{# get a list of all lights in the selected area #}
        {{ (expand(area_entities(target_area_input[0]) | select('match', 'light')) | map(attribute='entity_id') | list) }}"
  target_status_input: "{# Find the input select for this area state #}
        {{ expand(area_entities(target_area_input[0]) | select('match', 'input_select.*_state')) | map(attribute='entity_id') | list }}"    
  target_status: "{{ states(target_status_input[0]) }}"

  circadian_position: "{# Define next sunrise and sunset times based on sun #} 
    {%- set time_current = now()|as_timestamp -%} 
    {%- set time_sunrise = state_attr('sun.sun','next_rising')|as_timestamp -%}
    {%- set time_sunset = state_attr('sun.sun','next_setting')|as_timestamp -%}
    {# Fix input times so that they reflect the next sunrise and sunset #}
    {%- if time_sunrise < time_current -%}
      {% set time_sunrise = time_sunrise + 86400 -%}
    {%- endif -%}
    {%- if time_sunset < time_current -%}
      {% set time_sunset = time_sunset + 86400 -%}
    {%- endif -%}
    {# Calculate sun position, from 0 to 1 in daytime. 0.5 is midday #} 
    {%- if time_sunrise > time_sunset -%}
      {%- set time_sunrise = time_sunrise-86400 -%}
      {%- set position = (time_current-time_sunrise) / (time_sunset-time_sunrise) -%}
    {%- else -%}
      {# During nighttime, go from 1 to 2, at 2 it resets to daytime.  1.5 is midnight. #}
      {%- set time_sunset = time_sunset-86400 -%}
      {%- set position = 1 + (time_current-time_sunset) / (time_sunrise-time_sunset) -%}
    {%- endif -%} 
    {# Return calculated result #} {{ position }}"
  circadian_coefficient: "{# Calculate coefficient based on selected circadian function #} 
    {# Add 1 and divide by 2 to give us a 0 - 1 scale for the sine wave #}
    {%- set coefficient = (1 + sin( pi*(circadian_position) ) ) / 2 -%}
    {# Return calculated result #} {{ coefficient }}"
  circadian_angle: "{# Calculate angle based on selected circadian function #} 
    {%- set angle = [circadian_position,0]|max -%}
    {# Return calculated result #} {{ angle }}"
  circadian_brightness_midday: 100
  circadian_brightness_midnight: 10
  brightness_percentage: "{# Percentages seem to work better on my lights generally #}
    {% if target_status == 'On' %}
        {{ 100 }}
    {% else %}
        {% set brightness_range = circadian_brightness_midday - circadian_brightness_midnight %}
        {% set brightness_percentage = (circadian_coefficient * brightness_range) + circadian_brightness_midnight %}
        {{ brightness_percentage | int }}
    {% endif %}"

  elevation_brightness: "{# Calculate coefficient to be multiplied with brightness #}
    {{ (brightness_percentage / 100 * 255) | int }}"

  circadian_temperature_midday: 6535
  circadian_temperature_midnight: 2000
  circadian_temperature_value: "{# Color temperature value to adjust to #}
    {% if target_status == 'On' %}
        {{ circadian_temperature_midday }}
    {% else %}
        {% set temp_range = circadian_temperature_midday|float - circadian_temperature_midnight|float %}
        {{ (circadian_temperature_midnight|float + (circadian_coefficient * temp_range)) | int }}
    {% endif %}"
    
  red_level: 255
  blue_level: "{# from https://tannerhelland.com/2012/09/18/convert-temperature-rgb-algorithm-code.html #}
    {# Also https://www.niwa.nu/2013/05/math-behind-colorspace-conversions-rgb-hsl/ #}
    {% set temperature = (circadian_temperature_value / 100)|int %}
    {% set blue = 138.5177312231 * log(temperature - 10) - 305.0447927307 %}
    {%- if blue < 0 -%}
      {{ 0 }}
    {%- endif -%}
    {%- if blue > 255 -%}
      {{ 255 }}
    {%- else -%}
      {{ blue }}
    {% endif %}"

  green_level: "{# Calculate green level to be used #}
    {% set temperature = (circadian_temperature_value / 100)|int %}
    {% set green = 99.4708025861 * log(temperature) - 161.1195681661 %}
    {%- if green < 0 -%}
      {{ 0 }}
    {%- endif -%}
    {%- if green > 255 -%}
      {{ 255 }}
    {%- else -%}
      {{ green }}
    {% endif %}"

  max: 255
  min: "{%- set minimum = [blue_level, green_level]|min -%}
    {{ minimum }}"

  circadian_hue_value: "{# Color hue value to adjust to #}
    {%- set hue = (60 * ((green_level - blue_level) / (max - min))) -%}
    {%- if hue < 0 -%}
        {{ 360 }}
    {%- else -%}
        {{ hue }}
    {%- endif -%}"
    
  circadian_saturation_default: 100
  
  luminosity: "{# the Luminosity of a pixel is the range between the minimum and maximum values of Red Green and Blue. #}
    {% set luminosity = ([red_level, blue_level, green_level]|max + [red_level, blue_level, green_level]|min)/2 * 100 %}
    {{ luminosity }}"
    
  new_saturation: "{# Calculate the Luminosity as RGB(max - min). #}
    {# If Luminosity is less than 0.5 then Saturation = (max - min) / (max + min) #}
    {# If Luminosity is greater than 0.5 then Saturation = (max - min) / (2 - max - min) #}
    {%- if luminosity < 50 -%}
      {%- set saturation = ((max - min) / (max + min))|abs -%}
    {%- else -%}
      {%- set saturation = ((max - min) / (2 - max - min))|abs -%}
    {%- endif -%}
    {{ saturation * 100 }}"

  lights_dim_brightness: "{%- set lights_select = namespace(entities=[]) -%}
    {%- for i_entity in target_lights -%}
        {%- if state_attr(i_entity,'color_mode') == 'brightness' -%}
            {%- set lights_select.entities = lights_select.entities + [i_entity] -%}
        {%- endif -%}
    {%- endfor -%}
    {{ lights_select.entities }}"

  lights_dim_temperature: "{%- set lights_select = namespace(entities=[]) -%}
    {%- for i_entity in target_lights -%}
        {%- if state_attr(i_entity,'color_mode') == 'color_temp' -%}
            {%- set lights_select.entities = lights_select.entities + [i_entity] -%}
        {%- endif -%}
    {%- endfor -%}
    {{ lights_select.entities }}"
    
  lights_dim_color: "{%- set lights_select = namespace(entities=[]) -%}
    {%- for i_entity in target_lights -%}
        {%- if state_attr(i_entity,'color_mode') in ['rgb','rgbw','rgbww','xy','hs'] -%}
            {%- set lights_select.entities = lights_select.entities + [i_entity] -%}
        {%- endif -%}
    {%- endfor -%}
    {{ lights_select.entities }}"

mode: single
max_exceeded: silent
    
trigger:
  - platform: time_pattern
    minutes: /1
  - platform: event
    event_type: call_service
    event_data:
      domain: light
      service: turn_on

action:
  - delay:
      hours: 0
      minutes: 0
      seconds: 5
      milliseconds: 0
  - choose:
    - conditions: '{{ target_status == "On" or target_status == "Circadian" }}'
      sequence:
      - service: logbook.log
        data:
            name: automation
            message: "Temperature is {{ circadian_temperature_value }}, Hue is {{ circadian_hue_value }}, Saturation is {{ new_saturation }}"
      - choose:
        - conditions: '{{ lights_dim_brightness | length > 0 }}'
          sequence:
          - service: light.turn_on
            data:
              entity_id: '{{ lights_dim_brightness }}'
              brightness: '{{ elevation_brightness }}'
      - choose:
        - conditions: '{{ lights_dim_color | length > 0 }}'
          sequence:
          - service: light.turn_on
            data:
              entity_id: '{{ lights_dim_color }}'
              brightness_pct: "{{ brightness_percentage }}"
              hs_color:
              - '{{ circadian_hue_value }}'
              - '{{ new_saturation }}'

      - choose:
        - conditions: '{{ lights_dim_temperature | length > 0 }}'
          sequence:
          - service: light.turn_on
            data:
              entity_id: '{{ lights_dim_temperature }}'
              brightness: '{{ elevation_brightness }}'
              color_temp_kelvin: '{{ circadian_temperature_value }}'
            